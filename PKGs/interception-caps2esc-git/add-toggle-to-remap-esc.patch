diff --git a/caps2esc.c b/caps2esc.c
index e9e29b6..9a4210c 100644
--- a/caps2esc.c
+++ b/caps2esc.c
@@ -1,9 +1,16 @@
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 
 #include <unistd.h>
 #include <linux/input.h>
 
+typedef enum {
+    no_flags     = 0,
+    help_flag    = 1,
+    no_caps_flag = 2,
+} flags_t;
+
 // clang-format off
 const struct input_event
 esc_up          = {.type = EV_KEY, .code = KEY_ESC,      .value = 0},
@@ -32,7 +39,42 @@ void write_event(const struct input_event *event) {
         exit(EXIT_FAILURE);
 }
 
-int main(void) {
+flags_t parse_flags(int argc, char* argv[]) {
+    if (argc == 1) {
+        return no_flags;
+    }
+    if (argc > 2) {
+        return help_flag;
+    }
+
+    if (strcmp(argv[1], "-h") == 0) {
+        return help_flag;
+    }
+
+    if (strcmp(argv[1], "-n") == 0) {
+        return no_caps_flag;
+    }
+
+    return help_flag;
+}
+
+void show_help() {
+    fprintf(stdout,
+        "For usage see https://gitlab.com/interception/linux/plugins/caps2esc\n" \
+        "\n" \
+        "  FLAGS:\n" \
+        "    -h  - show this help message\n" \
+        "    -n  - do not treat the ESC key as Caps Lock\n"
+    );
+}
+
+int main(int argc, char* argv[]) {
+    flags_t flags = parse_flags(argc, argv);
+    if (flags & help_flag) {
+        show_help();
+        return 0;
+    }
+
     int capslock_is_down = 0, esc_give_up = 0;
     struct input_event input;
 
@@ -77,7 +119,7 @@ int main(void) {
             continue;
         }
 
-        if (input.code == KEY_ESC)
+        if (input.code == KEY_ESC && !(flags & no_caps_flag))
             input.code = KEY_CAPSLOCK;
         write_event(&input);
     }
