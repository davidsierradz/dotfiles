" bovine3dom's dogfood

" Provided only as an example.
" Do not install/run without reading through as you may be surprised by some
" of the settings.

" May require the latest beta builds.

" Move this to $XDG_CONFIG_DIR/tridactyl/tridactylrc (that's
" ~/.config/tridactyl/tridactylrc to mere mortals) or ~/.tridactylrc and
" install the native messenger (:installnative in Tridactyl). Run :source to
" get it in the browser, or just restart.

" NB: If you want "vim-like" behaviour where removing a line from 
" here makes the setting disappear, uncomment the line below.

sanitise tridactyllocal tridactylsync
set storageloc local

"
" Binds
"

" Comment toggler for Reddit and Hacker News
"bind ;c hint -c [class*="expand"],[class="togg"]

" Bind Right Shift (ä) to firefox memory page.
bind ä open about:memory

bindurl https://hckrnews.com/ ` hint -br
bindurl news\.ycombinator\.com/item ` hint -c [class*="expand"],[class="togg"]

bind <Escape> composite mode normal; unfocus; hidecmdline

bind J tabNext

bind K tabPrev

unbind X

unbind x

bind C composite tabNext; sleep 100; tabclose #

bind c composite tabPrev; sleep 100; tabclose #

bind x composite buffer #; sleep 100; tabclose #

bind X fillcmdline tabclose

bind <C-x> js window.stop()

bind D undo tab

bind d scrollpage 0.6

bind u scrollpage -0.6

bind j scrollline 5

bind k scrollline -5

bind <BS> buffer #

bind <C->> tabmove

bind <C-<> tabmove ^

"(() => {
"  var promise = new Promise((r, reject) => {
"    var body = document.getElementsByClassName("comment-tree")[0];
"    var interval = setInterval(() => {
"      try {
"        var e = body.querySelector(".athing.comtr:not(.noshow):not(.coll)");
"        e.getElementsByClassName("togg")[0].click();
"      } catch (e) {
"        reject(interval);
"      }
"    }, 500);
"  });
"  promise.catch((interval) => {
"    clearInterval(interval);
"  });
"})();

" Collapse first level parents but not any children.
bind <C-1> js (()=>{var a=new Promise((b,c)=>{var d=document.getElementsByClassName("comment-tree")[0],f=setInterval(()=>{try{var g=d.querySelector(".athing.comtr:not(.noshow):not(.coll)");g.getElementsByClassName("togg")[0].click()}catch(h){c(f)}},50)});a.catch(b=>{clearInterval(b)})})();

" Collapse only second level comments whor are not collapsed or hidden.
bind <C-2> js [...document.querySelectorAll('tr.athing.comtr:not(.noshow):not(.coll)')].filter(e => e.querySelector('td.ind img').attributes.width.value === '40').forEach(e => setTimeout(() => {e.querySelector('.togg').click()}, 1));

" Collapse only third level comments who are not collapsed.
bind <C-3> js [...document.querySelectorAll('tr.athing.comtr:not(.coll)')].filter(e => e.querySelector('td.ind img').attributes.width.value === '80').forEach(e => setTimeout(() => {e.querySelector('.togg').click()}, 1));

" Collapse all level comments.
bind <C-4> js [...document.getElementsByClassName('togg')].forEach(e => setTimeout(() => {e.click()}, 1));

"bind --mode=insert      <C-a> text.beginning_of_line
"bind --mode=input       <C-a> text.beginning_of_line

bind --mode=insert      <C-e> text.end_of_line
bind --mode=input       <C-e> text.end_of_line

bind --mode=insert      <C-k> text.kill_line
bind --mode=input       <C-k> text.kill_line

bind --mode=insert      <C-u> text.backward_kill_line
bind --mode=input       <C-u> text.backward_kill_line

"bind --mode=insert      <C-x> text.backward_kill_word
"bind --mode=input       <C-x> text.backward_kill_word

bind --mode=insert      <A-x> text.kill_word
bind --mode=input       <A-x> text.kill_word

bind --mode=insert      <C-m> text.backward_word
bind --mode=input       <C-m> text.backward_word

bind --mode=insert      <A-m> text.forward_word
bind --mode=input       <A-m> text.forward_word

bind --mode=insert      <A-Escape> mode input
bind --mode=input      <A-Escape> mode insert

" Paste from Selection buffer.
bind --mode=insert <A-p> clipboard xselpaste
bind --mode=input <A-p> clipboard xselpaste
bind --mode=insert <S-Insert> clipboard xselpaste
bind --mode=input <S-Insert> clipboard xselpaste

" Allow Ctrl-a to select all in the commandline
unbind --mode=ex <C-a>

" Let Ctrl-c to copy in the commandline
unbind --mode=ex <C-c>

" Paste from Selection buffer in command mode.
bind --mode=ex <S-Insert> clipboard xselpaste
bind --mode=ex <A-p> clipboard xselpaste

bind / fillcmdline find
bind ? fillcmdline find -?
bind n findnext 1
bind N findnext -1
bind <A-l> nohlsearch

"
" Misc settings
"

command tabPrev jsb browser.tabs.query({currentWindow: true}).then(tabs => { tabs = tabs.sort((t1, t2) => t1.index - t2.index); let prevTab = (tabs.findIndex(t => t.active) - 1 + tabs.length) % tabs.length; return browser.tabs.update(tabs[prevTab].id, {active: true}); })

command tabNext jsb browser.tabs.query({currentWindow: true}).then(tabs => { tabs = tabs.sort((t1, t2) => t1.index - t2.index); let prevTab = (tabs.findIndex(t => t.active) + 1 + tabs.length) % tabs.length; return browser.tabs.update(tabs[prevTab].id, {active: true}); })

" set editorcmd to suckless terminal, or use the defaults on other platforms
"js tri.browserBg.runtime.getPlatformInfo().then(os=>{const editorcmd = os.os=="linux" ? "nvim-gtk" : "auto"; tri.config.set("editorcmd", editorcmd)})

" Sane hinting mode
set hintfiltermode simple
set hintnames short
set hintchars asdfghjkl
set relatedopenpos related

"set tabopenpos related

set allowautofocus false

set theme dark
"set theme greenmat

set smoothscroll false

" Make Tridactyl work on more sites at the expense of some security
set csp clobber
fixamo_quiet

" Make quickmarks for the sane Tridactyl issue view
"quickmark t https://github.com/cmcaine/tridactyl/issues?utf8=%E2%9C%93&q=sort%3Aupdated-desc+

set yankto both
set putfrom clipboard

set newtabfocus page
"set newtab about:blank

"
" URL redirects
"

autocmd TabEnter .* unfocus
autocmd TabEnter .* composite mode normal ; hidecmdline
autocmd DocLoad .* composite mode normal ; hidecmdline
autocmd DocStart .* composite mode normal ; hidecmdline

autocmd DocLoad https://news.ycombinator.com/item js setTimeout(() => {[...document.querySelectorAll('tr.athing.comtr:not(.noshow):not(.coll)')].filter(e => e.querySelector('td.ind img').attributes.width.value === '40').forEach(e => setTimeout(() => {e.querySelector('.togg').click()}, 1));}, 2000);

autocmd DocLoad https://mail.google.com/mail/u/0/* mode ignore
autocmd DocStart https://mail.google.com/mail/u/0/* mode ignore
autocmd TabEnter https://mail.google.com/mail/u/0/* mode ignore

autocmd DocLoad docs.google.com/* mode ignore
autocmd DocStart docs.google.com/* mode ignore
autocmd TabEnter docs.google.com/* mode ignore

" New reddit is bad
"autocmd DocStart www.reddit.com urlmodify -t www old
" Mosquito nets won't make themselves
"autocmd DocStart www.amazon.co.uk urlmodify -t www smile

"------------------------------------------------------------------------------
" Firefox settings.
"------------------------------------------------------------------------------

" Note: Not supported by Tridactyl at the moment.

" Do not close the window when the last tab is closed.
" set browser.tabs.closeWindowWithLastTab=false

" Open new tabs at the end instead of after the current tab.
" set browser.tabs.insertRelatedAfterCurrent=false

" Do not warn when closing a window with tabs.
" set browser.tabs.warnOnClose=false

" Prevent focus stealing when opening links from external applications.
" set browser.tabs.loadDivertedInBackground=true

" Do not shorten URLs (protocol and trailing slash).
" set browser.urlbar.trimURLs=false

" Do not check if Firefox is the default browser.
" set browser.shell.checkDefaultBrowser=false

" Disable autofocusing elements via HTML.
" set browser.autofocus=false

" Disable warnings.
" set browser.tabs.warnOnClose=false
" set browser.tabs.warnOnCloseOtherTabs=false
" set browser.tabs.warnOnOpen=false
" set general.warnOnAboutConfig=false

" Disable Pocket (I always click on that thing instead of on 'Copy Location').
" set extensions.pocket.enabled=false

" Disable autoplay of videos.
" set media.autoplay.enabled=false

" Display the raw, punycode version of internationalized domain names (IDNs).
" This mitigates phishing attacks via IDNs.
" set network.IDN_show_punycode=true

" This will have to do until someone writes us a nice syntax file :)
" vim: set filetype=vim:
